apiVersion: v1
kind: Secret
metadata:
  name: aperag-env
  labels:
    {{- include "aperag.labels" . | nindent 4 }}
type: Opaque
stringData:
  .env: |
    # Database
    POSTGRES_HOST={{ .Values.django.metaDBHost }}
    POSTGRES_PORT={{ .Values.django.metaDBPort }}
    POSTGRES_DB={{ .Values.django.metaDBDatabase }}
    POSTGRES_USER={{ .Values.django.metaDBUsername }}
    POSTGRES_PASSWORD={{ .Values.django.metaDBPassword }}
    DATABASE_URL="postgres://{{ .Values.django.metaDBUsername }}:{{ .Values.django.metaDBPassword }}@{{ .Values.django.metaDBHost }}:{{ .Values.django.metaDBPort }}/{{ .Values.django.metaDBDatabase }}"
    
    # Redis
    REDIS_HOST={{ .Values.django.redisHost }}
    REDIS_PORT={{ .Values.django.redisPort }}
    REDIS_USERNAME={{ .Values.django.redisUsername }}
    REDIS_PASSWORD={{ .Values.django.redisPassword }}
    MEMORY_REDIS_URL=redis://{{ .Values.django.redisUsername }}:{{ .Values.django.redisPassword }}@{{ .Values.django.redisHost }}:{{ .Values.django.redisPort }}
    CELERY_BROKER_URL=redis://{{ .Values.django.redisUsername }}:{{ .Values.django.redisPassword }}@{{ .Values.django.redisHost }}:{{ .Values.django.redisPort }}/0
    
    # Vector DB
    VECTOR_DB_TYPE={{ .Values.django.vectorDBType }}
    VECTOR_DB_CONTEXT='{{ .Values.django.vectorDBContext }}'
    
    # Elasticsearch
    ES_HOST={{ .Values.django.esHost }}
    
    # Object Storage
    OBJECT_STORE_TYPE={{ .Values.django.objectStoreType }}
    OBJECT_STORE_LOCAL_ROOT_DIR={{ .Values.django.objectStoreLocalRootDir }}
    {{- if eq .Values.django.objectStoreType "s3" }}
    OBJECT_STORE_S3_ENDPOINT={{ .Values.django.objectStoreS3Endpoint }}
    OBJECT_STORE_S3_REGION={{ .Values.django.objectStoreS3Region }}
    OBJECT_STORE_S3_ACCESS_KEY={{ .Values.django.objectStoreS3AccessKey }}
    OBJECT_STORE_S3_SECRET_KEY={{ .Values.django.objectStoreS3SecretKey }}
    OBJECT_STORE_S3_BUCKET={{ .Values.django.objectStoreS3Bucket }}
    OBJECT_STORE_S3_PREFIX_PATH={{ .Values.django.objectStoreS3PrefixPath }}
    OBJECT_STORE_S3_USE_PATH_STYLE={{ .Values.django.objectStoreS3UsePathStyle }}
    {{- end }}
    
    # Celery Flower
    CELERY_FLOWER_USER={{ .Values.flower.user }}
    CELERY_FLOWER_PASSWORD={{ .Values.flower.password }}
    
    # Auth
    AUTH_TYPE={{ .Values.django.authType }}
    {{- if eq .Values.django.authType "auth0" }}
    AUTH0_DOMAIN={{ .Values.django.auth0Domain }}
    AUTH0_CLIENT_ID={{ .Values.django.auth0ClientId }}
    {{- else if eq .Values.django.authType "authing" }}
    AUTHING_DOMAIN={{ .Values.django.authingDomain }}
    AUTHING_APP_ID={{ .Values.django.authingAppId }}
    {{- else if eq .Values.django.authType "logto" }}
    LOGTO_DOMAIN={{ .Values.django.logtoDomain }}
    LOGTO_APP_ID={{ .Values.django.logtoAppId }}
    {{- end }}
    
    # Logging
    DJANGO_LOG_LEVEL={{ .Values.django.logLevel }}
    
    # Feishu
    FEISHU_APP_ID={{ .Values.django.feishu.appID }}
    FEISHU_APP_SECRET={{ .Values.django.feishu.appSecret }}
    FEISHU_ENCRYPT_KEY={{ .Values.django.feishu.encryptKey }}
    
    # Quota
    MAX_BOT_COUNT={{ .Values.django.quota.maxBotCount }}
    MAX_COLLECTION_COUNT={{ .Values.django.quota.maxCollectionCount }}
    MAX_DOCUMENT_COUNT={{ .Values.django.quota.maxDocumentCount }}
    MAX_CONVERSATION_COUNT={{ .Values.django.quota.maxConversationCount }}
    
    # Chunking
    CHUNK_SIZE={{ .Values.django.chunkSize }}
    CHUNK_OVERLAP_SIZE={{ .Values.django.chunkOverlapSize }}
    
    # Embedding
    EMBEDDING_MAX_CHUNKS_IN_BATCH={{ .Values.django.embeddingMaxChunksInBatch }}
    
    # Rerank
    RERANK_BACKEND={{ .Values.django.rerankBackend }}
    RERANK_SERVICE_URL={{ .Values.django.rerankServiceUrl }}
    RERANK_SERVICE_MODEL={{ .Values.django.rerankServiceModel }}
    RERANK_SERVICE_TOKEN_API_KEY={{ .Values.django.rerankServiceTokenApiKey }}
    
    # Tokenizer
    TIKTOKEN_CACHE_DIR=/root/.cache/tiktoken
    DEFAULT_ENCODING_MODEL=cl100k_base
    TOKENIZERS_PARALLELISM=false
    
    # Chat
    CHAT_CONSUMER_IMPLEMENTATION={{ .Values.django.chatConsumerImplementation }}