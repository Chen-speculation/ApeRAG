# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./

# Install dependencies, build app, and clean up in one layer
RUN yarn install --frozen-lockfile --network-timeout 300000 && \
    yarn cache clean

# Copy source code
COPY . .

# Set BASE_PATH environment variable for build
ENV BASE_PATH=/web/

# Build the application and clean up in one layer
RUN yarn build && \
    rm -rf node_modules .yarn/cache && \
    yarn install --production --frozen-lockfile && \
    yarn cache clean && \
    rm -rf /tmp/* /var/cache/apk/*

# Runtime stage
FROM nginx:mainline-alpine3.18-slim

# Copy built files from builder
COPY --from=builder /app/dist /html/web

# Copy nginx startup script
COPY ./deploy/startup.sh /docker-entrypoint.d/

# Make startup script executable and clean up
RUN chmod +x /docker-entrypoint.d/startup.sh && \
    rm -rf /tmp/* /var/cache/apk/*

EXPOSE 3000

CMD ["nginx", "-g", "daemon off;"] 