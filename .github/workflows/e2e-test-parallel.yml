name: Build and Deploy with KinD (Parallel)
on: [pull_request]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/aperag
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/aperag-frontend

jobs:
  enable-runner:
    uses: apecloud/apecloud-cd/.github/workflows/enable-self-runner.yml@v0.1.76
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "apecloud/ApeRAG"
      RUNNER_LABEL: "aperag-e2e-runner"
    secrets: inherit

  build-backend:
    runs-on: [self-hosted, aperag-e2e-runner]
    needs: [enable-runner]
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.meta.outputs.tags }}
    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space for build
      run: |
        echo "Initial disk usage:"
        df -h
        
        # Remove unnecessary software to free up space for Docker builds
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/lib/jvm
        sudo rm -rf /usr/share/swift
        
        # Clean up docker images and containers
        docker system prune -af --volumes
        
        # Clean apt cache
        sudo apt-get clean
        sudo apt-get autoremove -y
        
        echo "Disk usage after cleanup:"
        df -h

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=pr

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  build-frontend:
    runs-on: [self-hosted, aperag-e2e-runner]
    needs: [enable-runner]
    permissions:
      contents: read
      packages: write
    outputs:
      frontend-image: ${{ steps.meta.outputs.tags }}
    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space for build
      run: |
        echo "Initial disk usage:"
        df -h
        
        # Remove unnecessary software to free up space for Docker builds
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/lib/jvm
        sudo rm -rf /usr/share/swift
        
        # Clean up docker images and containers
        docker system prune -af --volumes
        
        # Clean apt cache
        sudo apt-get clean
        sudo apt-get autoremove -y
        
        echo "Disk usage after cleanup:"
        df -h

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=pr

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  test:
    runs-on: [self-hosted, aperag-e2e-runner]
    needs: [build-backend, build-frontend]
    permissions:
      contents: read
      packages: read
    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space for build
      run: |
        echo "Initial disk usage:"
        df -h
        
        # Remove unnecessary software to free up space for Docker builds
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/lib/jvm
        sudo rm -rf /usr/share/swift
        
        # Clean up docker images and containers
        docker system prune -af --volumes
        
        # Clean apt cache
        sudo apt-get clean
        sudo apt-get autoremove -y
        
        echo "Disk usage after cleanup:"
        df -h

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create KinD config
      run: |
        cat > kind-config.yaml <<EOF
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          kubeadmConfigPatches:
          - |
            kind: InitConfiguration
            nodeRegistration:
              kubeletExtraArgs:
                node-labels: "ingress-ready=true"
          extraPortMappings:
          - containerPort: 8000
            hostPort: 8000
            protocol: TCP
          - containerPort: 3000
            hostPort: 3000
            protocol: TCP
        - role: worker
        EOF

    - name: Create KinD cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: test-cluster
        config: kind-config.yaml

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Install KubeBlocks
      run: |
        chmod +x ./deploy/databases/01-prepare.sh
        ./deploy/databases/01-prepare.sh

    - name: Install Databases
      run: |
        chmod +x ./deploy/databases/02-install-database.sh
        ./deploy/databases/02-install-database.sh
        kubectl get pods -o wide

    - name: Pull and load images to KinD
      run: |
        echo "Pulling images from GHCR..."
        BACKEND_IMAGE=$(echo "${{ needs.build-backend.outputs.backend-image }}" | head -n1)
        FRONTEND_IMAGE=$(echo "${{ needs.build-frontend.outputs.frontend-image }}" | head -n1)
        
        echo "Backend image: $BACKEND_IMAGE"
        echo "Frontend image: $FRONTEND_IMAGE"
        
        docker pull $BACKEND_IMAGE
        docker pull $FRONTEND_IMAGE
        
        echo "Loading images to KinD cluster..."
        kind load docker-image $BACKEND_IMAGE --name test-cluster
        kind load docker-image $FRONTEND_IMAGE --name test-cluster

    - name: Install ApeRAG application
      run: |
        BACKEND_IMAGE=$(echo "${{ needs.build-backend.outputs.backend-image }}" | head -n1)
        FRONTEND_IMAGE=$(echo "${{ needs.build-frontend.outputs.frontend-image }}" | head -n1)
        
        # Extract repository and tag from full image names
        BACKEND_REPO=$(echo $BACKEND_IMAGE | cut -d: -f1)
        BACKEND_TAG=$(echo $BACKEND_IMAGE | cut -d: -f2)
        FRONTEND_REPO=$(echo $FRONTEND_IMAGE | cut -d: -f1)
        FRONTEND_TAG=$(echo $FRONTEND_IMAGE | cut -d: -f2)
        
        helm install aperag ./deploy/aperag \
          --set image.repository=$BACKEND_REPO \
          --set image.tag=$BACKEND_TAG \
          --set frontend.image.repository=$FRONTEND_REPO \
          --set frontend.image.tag=$FRONTEND_TAG \
          --wait --timeout=10m

    - name: Wait for ApeRAG pods to be ready
      run: |
        echo "Waiting for ApeRAG pods to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=aperag --timeout=600s
        kubectl get pods -o wide
        kubectl get svc

    - name: Port forward services
      run: |
        echo "Starting port forwarding..."
        kubectl port-forward svc/aperag 8000:8000 &
        kubectl port-forward svc/aperag-frontend 3000:3000 &
        sleep 15
        echo "Verifying services are accessible..."
        curl -f http://localhost:8000/health || echo "Backend health check failed"
        curl -f http://localhost:3000 || echo "Frontend check failed"

    - name: Run E2E tests
      run: |
        make e2e-test

    - name: Debug information on failure
      if: failure()
      run: |
        echo "=== Pods ==="
        kubectl get pods --all-namespaces -o wide
        echo "=== Services ==="
        kubectl get svc --all-namespaces
        echo "=== Events ==="
        kubectl get events --sort-by=.metadata.creationTimestamp --all-namespaces
        echo "=== Pod Logs ==="
        for pod in $(kubectl get pods -o jsonpath='{.items[*].metadata.name}'); do
          echo "--- Logs for $pod ---"
          kubectl logs $pod --tail=100 || true
        done

    - name: Setup SSH access for debugging
      if: failure()
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
      timeout-minutes: 30

  disable-runner:
    if: ${{ always() }}
    needs: [test]
    uses: apecloud/apecloud-cd/.github/workflows/enable-self-runner.yml@v0.1.76
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "apecloud/ApeRAG"
      RUNNER_LABEL: "aperag-e2e-runner"
      ENABLE: "disable"
    secrets: inherit 