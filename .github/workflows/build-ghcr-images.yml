name: Build and Push ghcr Images

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms for build'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
          - 'linux/amd64,linux/arm64'
          - 'linux/amd64'
          - 'linux/arm64'
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean
      image_tag:
        description: 'Custom image tag (optional)'
        required: false
        default: ''
        type: string

# Global permissions for the workflow
permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY_GHCR: ghcr.io

jobs:
  build-backend-amd64:
    runs-on: ubuntu-latest
    # Only run AMD64 build if platforms include amd64
    if: ${{ !inputs.platforms || contains(inputs.platforms, 'linux/amd64') }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5
            network=host

      - name: Log in to GitHub Container Registry
        if: ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/apecloud/aperag
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=semver,pattern={{version}},suffix=-amd64
            type=raw,value=latest-amd64,enable={{is_default_branch}}
            type=raw,value=${{ inputs.image_tag }}-amd64,enable=${{ inputs.image_tag != '' }}

      - name: Build and push AMD64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=aperag-amd64
            ${{ (github.event_name != 'pull_request') && 'type=registry,ref=ghcr.io/apecloud/aperag:cache-amd64' || '' }}
          cache-to: |
            type=gha,scope=aperag-amd64,mode=max
            ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) && 'type=registry,ref=ghcr.io/apecloud/aperag:cache-amd64,mode=max' || '' }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  build-backend-arm64:
    runs-on: ubuntu-latest
    # Only run ARM64 build if platforms include arm64
    if: ${{ !inputs.platforms || contains(inputs.platforms, 'linux/arm64') }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5
            network=host

      - name: Log in to GitHub Container Registry
        if: ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/apecloud/aperag
          tags: |
            type=ref,event=branch,suffix=-arm64
            type=ref,event=pr,suffix=-arm64
            type=semver,pattern={{version}},suffix=-arm64
            type=raw,value=latest-arm64,enable={{is_default_branch}}
            type=raw,value=${{ inputs.image_tag }}-arm64,enable=${{ inputs.image_tag != '' }}

      - name: Build and push ARM64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=aperag-arm64
            ${{ (github.event_name != 'pull_request') && 'type=registry,ref=ghcr.io/apecloud/aperag:cache-arm64' || '' }}
          cache-to: |
            type=gha,scope=aperag-arm64,mode=max
            ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) && 'type=registry,ref=ghcr.io/apecloud/aperag:cache-arm64,mode=max' || '' }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  create-backend-manifest:
    runs-on: ubuntu-latest
    needs: [build-backend-amd64, build-backend-arm64]
    # Only create manifest if both architectures are built and we're pushing
    if: ${{ always() && (github.event_name != 'pull_request') && (inputs.push_images != false) && (!inputs.platforms || inputs.platforms == 'linux/amd64,linux/arm64') && (needs.build-backend-amd64.result == 'success' || needs.build-backend-amd64.result == 'skipped') && (needs.build-backend-arm64.result == 'success' || needs.build-backend-arm64.result == 'skipped') }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/apecloud/aperag
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}

      - name: Create and push manifest
        run: |
          for tag in ${{ steps.meta.outputs.tags }}; do
            echo "Creating manifest for $tag"
            # Check if both architecture images exist
            amd64_exists=false
            arm64_exists=false
            
            if docker manifest inspect $tag-amd64 > /dev/null 2>&1; then
              amd64_exists=true
              echo "✅ AMD64 image found: $tag-amd64"
            else
              echo "❌ AMD64 image not found: $tag-amd64"
            fi
            
            if docker manifest inspect $tag-arm64 > /dev/null 2>&1; then
              arm64_exists=true
              echo "✅ ARM64 image found: $tag-arm64"
            else
              echo "❌ ARM64 image not found: $tag-arm64"
            fi
            
            # Create manifest with available architectures
            manifest_args=""
            if [ "$amd64_exists" = true ]; then
              manifest_args="$manifest_args $tag-amd64"
            fi
            if [ "$arm64_exists" = true ]; then
              manifest_args="$manifest_args $tag-arm64"
            fi
            
            if [ -n "$manifest_args" ]; then
              echo "Creating manifest with images:$manifest_args"
              docker manifest create $tag $manifest_args
              docker manifest push $tag
              echo "✅ Created and pushed manifest for $tag"
            else
              echo "❌ No architecture images found for $tag"
              exit 1
            fi
          done

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5
            network=host

      - name: Log in to GitHub Container Registry
        if: ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/apecloud/aperag-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ inputs.image_tag }},enable=${{ inputs.image_tag != '' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          platforms: ${{ inputs.platforms || 'linux/amd64,linux/arm64' }}
          push: ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=aperag-frontend
            ${{ (github.event_name != 'pull_request') && 'type=registry,ref=ghcr.io/apecloud/aperag-frontend:cache' || '' }}
          cache-to: |
            type=gha,scope=aperag-frontend,mode=max
            ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) && 'type=registry,ref=ghcr.io/apecloud/aperag-frontend:cache,mode=max' || '' }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  summary:
    runs-on: ubuntu-latest
    needs: [build-backend-amd64, build-backend-arm64, create-backend-manifest, build-frontend]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: ${{ inputs.platforms || 'linux/amd64,linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Push Images**: ${{ (github.event_name != 'pull_request') && (inputs.push_images != false) }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Custom Tag**: ${{ inputs.image_tag || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | AMD64 | ARM64 | Manifest | Frontend |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|-------|----------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ${{ needs.build-backend-amd64.result }} | ${{ needs.build-backend-arm64.result }} | ${{ needs.create-backend-manifest.result }} | ${{ needs.build-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Usage Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### For GitHub CI (Ubuntu):" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          echo 'services:' >> $GITHUB_STEP_SUMMARY
          echo '  aperag:' >> $GITHUB_STEP_SUMMARY
          echo '    image: ghcr.io/apecloud/aperag:latest' >> $GITHUB_STEP_SUMMARY
          echo '  aperag-frontend:' >> $GITHUB_STEP_SUMMARY
          echo '    image: ghcr.io/apecloud/aperag-frontend:latest' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### For Mac Development:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo '# Pull and run (supports both Intel and Apple Silicon)' >> $GITHUB_STEP_SUMMARY
          echo 'docker pull ghcr.io/apecloud/aperag:latest' >> $GITHUB_STEP_SUMMARY
          echo 'docker pull ghcr.io/apecloud/aperag-frontend:latest' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY 