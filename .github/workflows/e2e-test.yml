name: Build and Deploy with KinD
on: [pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        echo "Initial disk usage:"
        df -h
        
        # Remove unnecessary software to free up space
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/lib/jvm
        sudo rm -rf /usr/share/swift
        
        # Clean up docker images and containers
        docker system prune -af --volumes
        
        # Clean apt cache
        sudo apt-get clean
        sudo apt-get autoremove -y
        
        echo "Disk usage after cleanup:"
        df -h

    - name: Create KinD config
      run: |
        cat > kind-config.yaml <<EOF
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          kubeadmConfigPatches:
          - |
            kind: InitConfiguration
            nodeRegistration:
              kubeletExtraArgs:
                node-labels: "ingress-ready=true"
          extraPortMappings:
          - containerPort: 8000
            hostPort: 8000
            protocol: TCP
          - containerPort: 3000
            hostPort: 3000
            protocol: TCP
        - role: worker
        EOF

    - name: Create KinD cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: test-cluster
        config: kind-config.yaml

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Install KubeBlocks
      run: |
        chmod +x ./deploy/databases/01-prepare.sh
        ./deploy/databases/01-prepare.sh

    - name: Install Databases
      run: |
        chmod +x ./deploy/databases/02-install-database.sh
        ./deploy/databases/02-install-database.sh
        kubectl get pods -o wide

    - name: Build local images
      run: |
        # Clean up any existing build artifacts
        docker builder prune -af
        
        # Build images with optimization
        make build-aperag-local VERSION=dev-latest
        make build-aperag-frontend-local VERSION=dev-latest
        
        # Clean up intermediate layers after build
        docker image prune -f

    - name: Load images to KinD
      run: |
        echo "Disk usage before loading images:"
        df -h
        
        make load-images-to-kind VERSION=dev-latest KIND_CLUSTER_NAME=test-cluster

        echo "Disk usage after loading images:"
        df -h

    - name: Install ApeRAG application
      run: |
        helm install aperag ./deploy/aperag \
          --set image.tag=dev-latest \
          --set frontend.image.tag=dev-latest \
          --wait --timeout=10m

    - name: Wait for ApeRAG pods to be ready
      run: |
        echo "Waiting for ApeRAG pods to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=aperag --timeout=600s
        kubectl get pods -o wide
        kubectl get svc

    - name: Port forward services
      run: |
        echo "Starting port forwarding..."
        kubectl port-forward svc/aperag 8000:8000 &
        kubectl port-forward svc/aperag-frontend 3000:3000 &
        sleep 15
        echo "Verifying services are accessible..."
        curl -f http://localhost:8000/health || echo "Backend health check failed"
        curl -f http://localhost:3000 || echo "Frontend check failed"

    - name: Run E2E tests
      run: |
        make e2e-test

    - name: Debug information on failure
      if: failure()
      run: |
        echo "=== Pods ==="
        kubectl get pods --all-namespaces -o wide
        echo "=== Services ==="
        kubectl get svc --all-namespaces
        echo "=== Events ==="
        kubectl get events --sort-by=.metadata.creationTimestamp --all-namespaces
        echo "=== Pod Logs ==="
        for pod in $(kubectl get pods -o jsonpath='{.items[*].metadata.name}'); do
          echo "--- Logs for $pod ---"
          kubectl logs $pod --tail=100 || true
        done

    - name: Setup SSH access for debugging
      if: failure()
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true
      timeout-minutes: 30