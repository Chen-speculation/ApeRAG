"""empty message

Revision ID: 172905031acc
Revises: fc6cc94f112c
Create Date: 2025-06-16 17:52:14.938526

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '172905031acc'
down_revision: Union[str, None] = 'fc6cc94f112c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if constraint already exists before creating it
    connection = op.get_bind()
    result = connection.execute(
        sa.text("SELECT 1 FROM information_schema.table_constraints "
                "WHERE constraint_name = 'uq_lightrag_doc_status_workspace_id' "
                "AND table_name = 'lightrag_doc_status'")
    ).fetchone()
    
    if not result:
        op.create_unique_constraint('uq_lightrag_doc_status_workspace_id', 'lightrag_doc_status', ['workspace', 'id'])
    
    # Add user_id column as nullable first, then set default values and make it non-nullable
    op.add_column('llm_provider', sa.Column('user_id', sa.String(length=256), nullable=True))
    
    # Set default value for existing records
    op.execute("UPDATE llm_provider SET user_id = 'public' WHERE user_id IS NULL")
    
    # Make the column non-nullable
    op.alter_column('llm_provider', 'user_id', nullable=False)
    
    op.create_index(op.f('ix_llm_provider_user_id'), 'llm_provider', ['user_id'], unique=False)
    
    # Add provider_name column as nullable first, then set default values and make it non-nullable
    op.add_column('model_service_provider', sa.Column('provider_name', sa.String(length=256), nullable=True))
    
    # Set default value for existing records (copy from name column)
    op.execute("UPDATE model_service_provider SET provider_name = name WHERE provider_name IS NULL")
    
    # Make the column non-nullable
    op.alter_column('model_service_provider', 'provider_name', nullable=False)
    
    op.drop_index(op.f('ix_model_service_provider_user'), table_name='model_service_provider')
    op.drop_constraint(op.f('uq_model_service_provider_name_user_deleted'), 'model_service_provider', type_='unique')
    op.create_index(op.f('ix_model_service_provider_provider_name'), 'model_service_provider', ['provider_name'], unique=False)
    op.create_unique_constraint('uq_model_service_provider_name_deleted', 'model_service_provider', ['provider_name', 'gmt_deleted'])
    op.drop_column('model_service_provider', 'user')
    op.drop_column('model_service_provider', 'name')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('model_service_provider', sa.Column('name', sa.VARCHAR(length=256), autoincrement=False, nullable=False))
    op.add_column('model_service_provider', sa.Column('user', sa.VARCHAR(length=256), autoincrement=False, nullable=False))
    op.drop_constraint('uq_model_service_provider_name_deleted', 'model_service_provider', type_='unique')
    op.drop_index(op.f('ix_model_service_provider_provider_name'), table_name='model_service_provider')
    op.create_unique_constraint(op.f('uq_model_service_provider_name_user_deleted'), 'model_service_provider', ['name', 'user', 'gmt_deleted'])
    op.create_index(op.f('ix_model_service_provider_user'), 'model_service_provider', ['user'], unique=False)
    op.drop_column('model_service_provider', 'provider_name')
    op.drop_index(op.f('ix_llm_provider_user_id'), table_name='llm_provider')
    op.drop_column('llm_provider', 'user_id')
    op.drop_constraint('uq_lightrag_doc_status_workspace_id', 'lightrag_doc_status', type_='unique')
    # ### end Alembic commands ###
